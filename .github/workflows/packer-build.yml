# name: Packer Build
  
# on:
#   pull_request:
#     types: [closed]

# jobs:
#   build-and-deploy: 
#     if: github.event.pull_request.merged==true

#     runs-on: ubuntu-latest 
    
#     steps:
#     - name: Check out code
#       uses: actions/checkout@v3
    
#     - name: Zip all the webapp files
#       run: |
#         zip -r web-app.zip ./
#         pwd
    
#     - name: 'Authenticate to Google Cloud'
#       uses: 'google-github-actions/auth@v0.4.0'
#       with: 
#         credentials_json: '${{ secrets.GCP_CREDENTIALS }}'
    
#     - name: Setup Environment File
#       run: |
#         cat << EOF > .env
#         DB_HOST: ${{ secrets.HOST }}
#         DB_USER: ${{ secrets.DB_USER }}
#         DB_PASS: ${{ secrets.DB_PASSWORD }}
#         DB_PORT: ${{ secrets.DB_PORT }}
#         DB_NAME: ${{ secrets.DB_NAME }}
#         EOF
#       shell: bash
    
#     - name: Install Packer
#       run: |
#         curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
#         sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
#         sudo apt-get update && sudo apt-get install packer
    
#     - name: Initialize Packer
#       run: packer init .
#       working-directory: ./packer
    
#     - name: Format Packer template
#       run: |
#         packer fmt -check -diff .
#         if [ $? -ne 0 ]; then
#           echo "Packer templates need formatting. Run 'packer fmt' locally and push the changes."
#           exit 1
#         fi
#       working-directory: ./packer
    
#     - name: Validate Packer template
#       run: packer validate .
#       working-directory: ./packer
#     - 
#       name: Build Packer image
#       run: packer build  .
#       working-directory: ./packer
#     -
#       name: Get Latest Image Name
#       id: get_IMG_NAME
#       run: |
#             IMG_NAME=$(gcloud compute images list --project devproject-415015 --filter='name:centos-stream-8-custom3-image' --sort-by=~creationTimeStamp --limit=1 --format='value(name)')
#             echo "::set-output name=IMG_NAME::$IMG_NAME"
#     -
#       name: Get Instance Group Manager
#       id: get_instancemanager
#       run: |
#         instancemanager =$(glcloud compute instance-groups managed list --regions ${{ secrets.REGION}} --format="value(name)" --limit 1)
#         echo "::set-output name=instancemanager::$instancemanager"
#         echo "instancemanager: $instancemanager"
    
#     - 
#       name: Get currentkeyring
#       id: get_keyRing
#       run: |
#         currentkeyring=$(gcloud kms keyrings list --location=${{secrets.REGION}} --project=${{secrets.PROJECT_ID}} --format="value(name, createTime)" | sort -k2,2r | head -n1 | awk '{print $1}')
#         echo "::set-output name=currentkeyring::$currentkeyring"
#         echo "currentkeyring=$currentkeyring"
#     - 
#       name: Get VM Key
#       id: get_vm_key
#       run: |
#         vmkey=$(gcloud kms keys list --location=${{secrets.REGION}} --keyring=${{steps.get_keyRing.outputs.currentkeyring}} --project =${{secrets.PROJECT_ID}} --filter="name:vm-machine" --format="value(name)")
#         echo "::set-output name=vmkey::$vmkey"
#         echo "vmkey=$vmkey"

#     -
#       name: Create Instance Template
#       run: |
#           gcloud compute instance-templates create instance-template-$(date +%Y%m%d%H%M%S) \
#            --region=${{secrets.REGION}} \
#            --region=${{secrets.PROJECT_ID}} \
#            --machine-type =${{secrets.MACHINETYPE}} \
#            --network-interface=network-tier=PREMIUM,stack-type=IPV4_ONLY,subnet=https://www.googleapis.com/compute/v1/projects/devproject-415015/regions/us-east1/subnetwork/webapp \
#            --metadata=startup-script="#!/bin/bash
#              if [ ! -f '/opt/env' ]; then
#                touch /opt/.env
#              fi
#              echo 'DB_HOST=${{secrets.HOSTIP}}' >/opt/.env
#              echo 'DB_USER=${{secrets.USERNAME}}' >/opt/.env
#              echo 'DB_NAME=${{secrets.DATABASE}}' >/opt/.env
#              echo 'DB_PASSWORD=${{secrets.IPPASSWORD}}' >/opt/.env
#              echo 'DB_DIALECT=mysql' >> /opt/.env
#              echo 'DB_PORT=${{secrets.PORT}}' >> /opt/.env
#              chown csye6225:csye6225 /opt/env
#              systemctl restart web-app" \
#              --service-account = ${{secrets.SERVICE_ACCOUNT_EMAIL}} \
#              --scopes=https://www.googleapis.com/auth/cloud/cloud-platform \
#              --create-disk=auto-delete=yes,boot=yes,device-name=Disk1,image="projects/devproject-415015/global/images/${{steps.get_IMG_NAME.outputs.IMG_NAME }} ,kms-key=${{steps.get_vm_key.outputs.vmkey}},mode=rw,size=20,type=pd-balaced \"
#              --tags=http-server
#     -
#       name: Configure Instance Groups
#       run: |
#         gcloud compute instance-groups managed rolling-action start-update ${{steps.get_instancemanager.outputs.instancemanager}} \
#           --version=template=${{steps.get_template.outputs.template_name}} \
#           --max-unavailable=3 \
#           --max-surge=3 \
#           --region=${{secrets.REGION}}
#     -
#       name: Monitoring the instances
#       run: |
#         gcloud compute instance-groups managed wait-until ${{steps.get_instancemanager.outputs.instancemanager}} \
#         --version-target-reached \
#         --region=${{secrets.REGION}}


#         gcloud compute instance-groups managed rolling-action start-update web-app-resource-manager --version=template=global/instanceTemplates/instance-template-2024040934654 --max-unavailable=3 --max-surge=3 --region=us-east1



name: Packer Build
env:
  DATABASE_HOSTNAME: ${{ secrets.DB_HOST }}
  DATABASE_USER: ${{ secrets.DB_USER }}
  DATABASE_PASSWORD: ${{ secrets.DB_PASSWORD }}
  DB_PORT: ${{ secrets.DB_PORT }}
  DATABASE_Name: ${{ secrets.DB_NAME }}

on:
   
  pull_request:
    types: [closed]

jobs:
  build:
    if: github.event.pull_request.merged== true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v0.4.0
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: Debug Credential Keys
        run: |
          echo '${{ secrets.GCP_CREDENTIALS }}' | jq 'keys'

      - name: Zip the web application files
        run: zip -r web-app.zip ./

      - name: Create .env file
        run: |
          cat << EOF > .env
          DB_HOST: ${{ secrets.DB_HOSTDB }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSDB }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_PORT: ${{ secrets.DB_PORT }}
          EOF

      - name: Install Packer
        run: |
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get update && sudo apt-get install packer

      - name: Initialize Packer
        run: packer init .
        working-directory: ./packer

      - name: Format Packer template
        run: packer fmt -check -diff .
        working-directory: ./packer
        continue-on-error: true

      - name: Validate Packer template
        run: packer validate .
        working-directory: ./packer

       #If everything is validated, you can uncomment the next lines to build the image
      - name: Build Packer image
        run: packer build .
        working-directory: ./packer

      - name: Get Latest Image from GCP Console
        id: get_Image
        run: |
           IMAGE=$(gcloud compute images list --project dev-cloud-415015 --filter='name:centos-8-stream-*' --sort-by=~creationTimestamp --limit=1 --format='value(name)')
           echo "::set-output name=IMAGE::$IMAGE"
           echo "IMAGE: $IMAGE"
 
      - name: Get Managed Instance Group
        id: get_groupmanager
        run: |
          groupmanager=$(gcloud compute instance-groups managed list --regions ${{ secrets.REGION }} --format="value(name)" --limit 1)
          echo "::set-output name=groupmanager::$groupmanager"
          echo "groupmanager: $groupmanager"

        
      - name: Get latestck
        id: get_latestck
        run: |
          latestck=$(gcloud kms keyrings list --location=${{ secrets.REGION }} --project=${{secrets.PROJECT_ID}} --format="value(name, createTime)" | sort -k2,2r | head -n1 | awk '{print $1}')
          
          echo "::set-output name=latestck::$latestck"
          echo "latestck=$latestck"

      - name: get service account 
        run: |
           echo "${{secrets.SERVICE_ACCOUNT_EMAIL}}"

      - name: Get instance key
        id: get_instance_key
        run: |
         instance_key=$(gcloud kms keys list --location=${{ secrets.REGION }} --keyring=${{ steps.get_latestck.outputs.latestck }} --project=${{ secrets.PROJECT_ID }} --filter=name:vm-machine-key --format="value(name)")
         echo "::set-output name=instance_key::$instance_key"
         echo "instance_key=$instance_key"

         
      - name: Create Instance Template
        run: |
          gcloud compute instance-templates create instance-template-$(date +%Y%m%d%H%M%S) \
          --instance-template-region=${{ secrets.REGION }}  \
          --project=${{secrets.PROJECT_ID}} \
          --machine-type=${{secrets.MACHINETYPE}} \
          --network-interface=network-tier=PREMIUM,stack-type=IPV4_ONLY,subnet=https://www.googleapis.com/compute/v1/projects/dev-cloud-415015/regions/us-east4/subnetworks/udaygattu-webapp \
          --metadata=startup-script="#!/bin/bash
            echo \"DB_HOST=${{secrets.HOSTIP}}\" > /opt/.env
            echo \"DB_USER=${{secrets.DBUSERNAME}}\" >> /opt/.env
            echo \"DB_PASSWORD=${{secrets.NEWPASSWORD}}\" >> /opt/.env
            echo \"DB_NAME=${{secrets.DBNAME}}\" >> /opt/.env
            echo \"DB_PORT=${{secrets.DBPORT}}\" >> /opt/.env
            echo \"project_id=${{ secrets.PROJECT_ID}}\" >> /opt/.env " \
          --service-account=${{secrets.SERVICE_ACCOUNT_EMAIL}} \
          --scopes="cloud-platform" \
          --create-disk=auto-delete=yes,boot=yes,device-name=Disk1,image="projects/dev-cloud-415015/global/images/${{steps.get_Image.outputs.IMAGE}}",kms-key=${{steps.get_instance_key.outputs.instance_key}},mode=rw,size=100,type=pd-balanced \
          --tags=http-server

      - name: Get Template
        id: get_template
        run: |
          tempName=$(gcloud compute instance-templates list --project=${{secrets.PROJECT_ID}} --sort-by="~creationTimestamp" --limit=1 --format="value(name)")
          echo "::set-output name=tempName::$tempName"
          echo "tempName: $tempName"


      - name: Configure Instance Groups
        run: |
          gcloud compute instance-groups managed rolling-action start-update ${{steps.get_groupmanager.outputs.groupmanager}} \
            --version=template=https://compute.googleapis.com/compute/v1/projects/dev-cloud-415015/regions/us-east4/instanceTemplates/${{ steps.get_template.outputs.tempName }} \
            --max-unavailable=3 \
            --region=${{secrets.REGION}}

      - name: Monitoring the instances
        run: |
          gcloud compute instance-groups managed wait-until ${{steps.get_groupmanager.outputs.groupmanager}} \
            --version-target-reached \
            --region=${{secrets.REGION}}



    



